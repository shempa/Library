#pragma checksum "C:\проекты C#\Library\Library\View\Books\GetBooks.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "0f8f3394ad9e0b7e717b2a14988cb9d488642541"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.View_Books_GetBooks), @"mvc.1.0.view", @"/View/Books/GetBooks.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"0f8f3394ad9e0b7e717b2a14988cb9d488642541", @"/View/Books/GetBooks.cshtml")]
    public class View_Books_GetBooks : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<Library.Models.Book>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n<div class=\"title2\">\r\n    <h2>");
#nullable restore
#line 4 "C:\проекты C#\Library\Library\View\Books\GetBooks.cshtml"
   Write(ViewData["Title"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</h2>
</div>

<div id=""tableBlock""></div>
<div id=""editBlock"">
    <p><b>Редактирование книги</b></p>
    <table>
        <tr><td><input type=""hidden"" id=""editId"" /></td><td></td></tr>
        <tr><td><label>Название: </label></td><td><input type=""text"" id=""editName"" /></td></tr>
        <tr><td><label>Автор: </label></td><td><input type=""text"" id=""editAuthor"" /></td></tr>
        <tr><td><label>Год: </label></td><td><input type=""number"" id=""editYear"" /></td></tr>
    </table>
    <button id=""editBook"">Сохранить</button>
</div>
<div id=""createBlock"">
    <p><b>Добавление книги</b></p>
    <table>
        <tr><td><label>Название: </label></td><td><input type=""text"" id=""addName"" /></td></tr>
        <tr><td><label>Автор: </label></td><td><input type=""text"" id=""addAuthor"" /></td></tr>
        <tr><td><label>Год: </label></td><td><input type=""number"" id=""addYear"" /></td></tr>
    </table>
    <button id=""addBook"">Сохранить</button>
</div>

");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script type=""text/javascript"">
        $(document).ready(function () {

            GetAllBooks();

            $(""#editBook"").click(function (event) {
                event.preventDefault();
                EditBook();
            });

            $(""#addBook"").click(function (event) {
                event.preventDefault();
                AddBook();
            });

        });
        // Получение всех книг по ajax-запросу
        function GetAllBooks() {

            $(""#createBlock"").css('display', 'block');
            $(""#editBlock"").css('display', 'none');
            $.ajax({
                url: '/api/values',
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    WriteResponse(data);
                },
                error: function (x, y, z) {
                    alert(x + '\n' + y + '\n' + z);
                }
            });
        }
        // Добавление новой книги
        functi");
                WriteLiteral(@"on AddBook() {
            // получаем значения для добавляемой книги
            var book = {
                Name: $('#addName').val(),
                Author: $('#addAuthor').val(),
                Year: $('#addYear').val()
            };

            $.ajax({
                url: '/api/values/',
                type: 'POST',
                data: JSON.stringify(book),
                contentType: ""application/json;charset=utf-8"",
                success: function (data) {
                    GetAllBooks();
                },
                error: function (x, y, z) {
                    alert(x + '\n' + y + '\n' + z);
                }
            });
        }
        // Удаление книги
        function DeleteBook(id) {

            $.ajax({
                url: '/api/values/' + id,
                type: 'DELETE',
                contentType: ""application/json;charset=utf-8"",
                success: function (data) {
                    GetAllBooks();
                },
  ");
                WriteLiteral(@"              error: function (x, y, z) {
                    alert(x + '\n' + y + '\n' + z);
                }
            });
        }
        // редактирование книги
        function EditBook() {
            var id = $('#editId').val()
            // получаем новые значения для редактируемой книги
            var book = {
                Id: $('#editId').val(),
                Name: $('#editName').val(),
                Author: $('#editAuthor').val(),
                Year: $('#editYear').val()
            };
            $.ajax({
                url: '/api/values/' + id,
                type: 'PUT',
                data: JSON.stringify(book),
                contentType: ""application/json;charset=utf-8"",
                success: function (data) {
                    GetAllBooks();
                },
                error: function (x, y, z) {
                    alert(x + '\n' + y + '\n' + z);
                }
            });
        }
        // вывод полученных данных на экра");
                WriteLiteral(@"н
        function WriteResponse(books) {
            var strResult = ""<table><th>ID</th><th>Название</th><th>Автор</th><th>Год издания</th>"";
            $.each(books, function (index, book) {
                strResult += ""<tr><td>"" + book.Id + ""</td><td> "" + book.Name + ""</td><td>"" +
                    book.Author + ""</td><td>"" + book.Year +
                    ""</td><td><a id='editItem' data-item='"" + book.Id + ""' onclick='EditItem(this);' >Редактировать</a></td>"" +
                    ""<td><a id='delItem' data-item='"" + book.Id + ""' onclick='DeleteItem(this);' >Удалить</a></td></tr>"";
            });
            strResult += ""</table>"";
            $(""#tableBlock"").html(strResult);

        }
        // обработчик удаления
        function DeleteItem(el) {
            // получаем id удаляемого объекта
            var id = $(el).attr('data-item');
            DeleteBook(id);
        }
        // обработчик редактирования
        function EditItem(el) {
            // получаем id редак");
                WriteLiteral(@"тируемого объекта
            var id = $(el).attr('data-item');
            GetBook(id);
        }
        // вывод данных редактируемой книги в поля для редактирования
        function ShowBook(book) {
            if (book != null) {
                $(""#createBlock"").css('display', 'none');
                $(""#editBlock"").css('display', 'block');
                $(""#editId"").val(book.Id);
                $(""#editName"").val(book.Name);
                $(""#editAuthor"").val(book.Author);
                $(""#editYear"").val(book.Year);
            }
            else {
                alert(""Такая книга не существует"");
            }
        }
        // запрос книги на редактирование
        function GetBook(id) {
            $.ajax({
                url: '/api/values/' + id,
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    ShowBook(data);
                },
                error: function (x, y, z) {
        ");
                WriteLiteral("            alert(x + \'\\n\' + y + \'\\n\' + z);\r\n                }\r\n            });\r\n        }\r\n    </script>\r\n");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Library.Models.Book> Html { get; private set; }
    }
}
#pragma warning restore 1591
